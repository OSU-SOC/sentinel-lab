{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            }
        },
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name for the Log Analytics workspace used to aggregate data"
            }
        },
        "pricingTier": {
            "type": "string",
            "allowedValues": [
                "PerGB2018",
                "Free",
                "Standalone",
                "PerNode",
                "Standard",
                "Premium"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Pricing tier: pergb2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
            }
        },
        "dataRetention": {
            "type": "int",
            "defaultValue": 30,
            "minValue": 7,
            "maxValue": 730,
            "metadata": {
                "description": "Number of days of retention. Workspaces in the legacy Free pricing tier can only have 7 days."
            }
        },
        "immediatePurgeDataOn30Days": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "If set to true when changing retention to 30 days, older data will be immediately deleted. Use this with extreme caution. This only applies when retention is being set to 30 days."
            }
        },
        "deployPipeline": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "",
                "Logstash-EventHub",
                "Logstash-EventHub-Mordor"
            ],
            "metadata": {
                "description": "Do you want to deploy a data ingestion pipeline along with an Azure Sentinel solution? Events get sent to a custom logs table named prerecorded. You also have the option to deploy the pipeline with pre-recorded datasets from the Mordor project (https://mordordatasets.com)"
            }
        },
        "addToCart": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "",
                "win10",
                "win10-calderaC2"
            ],
            "metadata": {
                "description": "Do you want to deploy additional resources and connect them to your current Azure Sentinel's workspace?"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Username for the Virtual Machines (Windows, Linux)."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for all Virtual Machines (Windows , Linux). If you want to enable SSH key authentication for Linux virtual machines, make sure you set the 'linuxAuthenticationType' parameter to 'sshPublicKey' and provide the SSH Public Key string via the 'linuxAdminKey' parameter."
            }
        },
        "linuxAuthenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
            }
        },
        "linuxAdminKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "SSH Key to authenticate against Linux Virtual Machines. Provide the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
            }
        },
        "calderaC2AdminUserName": {
            "type": "string",
            "defaultValue": "admin",
            "metadata": {
                "description": "Caldera C2 admin user name for its Web Interface. The user name 'admin' is the default name for it."
            }
        },
        "calderaC2AdminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Caldera C2 admin user password for its Web Interface. If you add calderaC2 to the 'addToCart' parameter, make sure you set this parameter. If this parameter is left empty, a random password will be generated for it and you will have to access and read the Caldera local conf file in the Caldera docker container to retrieve the random password."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of Linux and Windows virtual machines. References: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-previous-gen, https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "enableAdditionalLASolutions": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Additional Log Solutions that you can install on the top of your Log Analytics Workspace. (e.g [\"ServiceMap\",\"WireData2\",\"InfrastructureInsights\"])"
            }
        },
        "enableDataConnectorsKind": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "The kind of data connectors that can be deployed via ARM templates are the following: [\"AzureActivityLog\",\"SecurityInsightsSecurityEventCollectionConfiguration\",\"WindowsFirewall\",\"DnsAnalytics\"]"
            }
        },
        "setSecurityCollectionTier": {
            "type": "string",
            "allowedValues": [
                "All",
                "Recommended",
                "Minimal",
                "None"
            ],
            "defaultValue": "Minimal",
            "metadata": {
                "description": "Tier for gathering Windows Security Events."
            }
        },
        "enableWinEventProviders": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Do you want to configure your Log Analytics Workspace to collect Windows Event Logs from several pre-defined event providers?. Windows Security Auditing is not enabled through this option. It is enabled through the Data Connectors parameter."
            }
        },
        "postAnalyticRules": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "If set to true, Analytic rules from the official Azure Sentinel GitHub Repository https://github.com/Azure/Azure-Sentinel/tree/master/Detections translated to JSON files in https://github.com/hunters-forge/Blacksmith/tree/azure/templates/azure/Sentinel2Go/analytic-rules are created in your Log Analytics workspace. Remember that several queries need specific data tables to be enabled in Log Analytics."
            }
        },
        "userAssignedIdentityName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Paremeter needed to upload Sentinel's analytic rules from the Azure-Sentinel GitHub repo. This parameter requires a user assigned managed identity with a Contributor role at a subscription scope. Reference: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-assignments-cli#user-at-a-subscription-scope"
            }
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to the Windows 10 VM"
            },
            "defaultValue": "*"
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The location of resources"
            },
            "defaultValue": "https://raw.githubusercontent.com/OTRF/Azure-Sentinel2Go/master/"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            },
            "defaultValue": ""
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "artifactsBlacksmithLocation": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/",
        "uniqueWorkspace": "[concat(parameters('workspaceName'), uniquestring(resourceGroup().id, parameters('utcValue')))]",
        "customScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/customScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
        "customScriptTemplateUri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/customScript.json', parameters('_artifactsLocationSasToken')))]"
    },
    "resources": [
        {
            "name": "[variables('uniqueWorkspace')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('location')]",
            "properties": {
                "retentionInDays": "[parameters('dataRetention')]",
                "features": {
                    "immediatePurgeDataOn30Days": "[parameters('immediatePurgeDataOn30Days')]"
                },
                "sku": {
                    "name": "[parameters('pricingTier')]"
                }
            }
        },
        {
            "name": "[concat('SecurityInsights','(', variables('uniqueWorkspace'),')')]",
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('uniqueWorkspace'))]"
            },
            "plan": {
                "name": "[concat('SecurityInsights','(', variables('uniqueWorkspace'),')')]",
                "product": "OMSGallery/SecurityInsights",
                "publisher": "Microsoft",
                "promotionCode": ""
            }
        },
        {
            "condition": "[not(empty(parameters('enableAdditionalLASolutions')))]",
            "name": "enableAdditionalLASolutions",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions/', concat('SecurityInsights','(', variables('uniqueWorkspace'),')'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/log-analytics/additionalSolutions.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "solutionTypes": {
                        "value": "[parameters('enableAdditionalLASolutions')]"
                    },
                    "workspaceName": {
                        "value": "[variables('uniqueWorkspace')]"
                    },
                    "workspaceId": {
                         "value": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
                     },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('enableDataConnectorsKind')))]",
            "name": "enableDataConnectorsKind",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions/', concat('SecurityInsights','(', variables('uniqueWorkspace'),')'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/data-connectors/allConnectors.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "dataConnectorsKind": {
                        "value": "[parameters('enableDataConnectorsKind')]"
                    },
                    "workspaceName": {
                        "value": "[variables('uniqueWorkspace')]"
                    },
                    "workspaceId": {
                         "value": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
                     },
                     "subscriptionId": {
                         "value": "[subscription().subscriptionId]"
                     },
                    "securityCollectionTier": {
                        "value": "[parameters('setSecurityCollectionTier')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[not(empty(parameters('enableWinEventProviders')))]",
            "name": "enableLAWinDataSources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/log-analytics/winDataSources.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[variables('uniqueWorkspace')]"
                    },
                    "winEventProviders": {
                        "value": "[parameters('enableWinEventProviders')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[or(not(empty(parameters('deployPipeline'))),not(empty(parameters('addToCart'))))]",
            "name": "deployLAFunctions",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('linkedtemplates/log-analytics/functions.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[variables('uniqueWorkspace')]"
                    }
                }
            }
        },
        {
            "condition": "[and(parameters('postAnalyticRules'),not(empty(parameters('userAssignedIdentityName'))),contains(parameters('enableAdditionalLASolutions'),'ServiceMap'),contains(parameters('enableAdditionalLASolutions'),'WireData2'))]",
            "name": "azCLIPostAnalyticRules",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions/', concat('SecurityInsights','(', variables('uniqueWorkspace'),')'))]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]" : {}
                }
            },
            "properties": {
                "forceUpdateTag": 1,
                "azCliVersion": "2.0.80",
                "arguments": "[concat('-r', ' ', resourceGroup().name, ' ', '-w', ' ', variables('uniqueWorkspace'))]",
                "primaryScriptUri": "[concat(parameters('_artifactsLocation'), 'scripts/Post-AnalyticRules.sh')]",
                "supportingScriptUris":[],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "condition": "[contains(parameters('deployPipeline'), 'Logstash-EventHub')]",
            "name": "deployLogstashVM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/LinuxVM/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('linuxAuthenticationType')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[if(equals(parameters('linuxAuthenticationType'), 'password'), parameters('adminPassword'), parameters('linuxAdminKey'))]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('deployPipeline'), 'Logstash-EventHub')]",
            "name": "deployEventHub",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/EventHub/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "projectName": {
                        "value": "SentinelPipe"
                    },
                    "eventHubSku": {
                        "value": "Standard"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('deployPipeline'), 'Logstash-EventHub')]",
            "name": "pipelineOnly",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "deployEventHub",
                "deployLogstashVM"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupLogstash"
                    },
                    "commandToExecute": {
                        "value": "[if(equals(parameters('deployPipeline'), 'Logstash-EventHub'), concat('bash logstash-setup.sh -i', ' ', reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').customerId, ' ', '-c', ' ', '\"', reference('deployEventHub').outputs.NamespaceConnectionString.value, '\"', ' ', '-e', ' ', reference('deployEventHub').outputs.EventHubName.value, ' ', '-k', ' ', listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').primarySharedKey, ' ', '-u', ' ', parameters('adminUsername')), 'Resource not deployed')]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(parameters('_artifactsLocation'), concat('scripts/logstash-setup.sh', parameters('_artifactsLocationSasToken')))]"
                        ]
                    },
                    "vmName": {
                        "value": "[if(equals(parameters('deployPipeline'), 'Logstash-EventHub'), reference('deployLogstashVM').outputs.vmName.value, 'Resource not deployed')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('deployPipeline'), 'Logstash-EventHub-Mordor')]",
            "name": "pipelineMordor",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "deployEventHub",
                "deployLogstashVM"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupLogstash"
                    },
                    "commandToExecute": {
                        "value": "[if(equals(parameters('deployPipeline'), 'Logstash-EventHub-Mordor'), concat('bash logstash-setup.sh -i', ' ', reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').customerId, ' ', '-c', ' ', '\"', reference('deployEventHub').outputs.NamespaceConnectionString.value, '\"', ' ', '-e', ' ', reference('deployEventHub').outputs.EventHubName.value, ' ', '-k', ' ', listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').primarySharedKey, ' ', '-u', ' ', parameters('adminUsername'), ' ', '-m'), 'Resource not deployed')]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(parameters('_artifactsLocation'), concat('scripts/logstash-setup.sh', parameters('_artifactsLocationSasToken')))]"
                        ]
                    },
                    "vmName": {
                        "value": "[if(equals(parameters('deployPipeline'), 'Logstash-EventHub-Mordor'), reference('deployLogstashVM').outputs.vmName.value, 'Resource not deployed')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('addToCart'), 'calderaC2')]",
            "name": "deployC2VM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/C2/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('linuxAuthenticationType')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[if(equals(parameters('linuxAuthenticationType'), 'password'), parameters('adminPassword'), parameters('linuxAdminKey'))]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "c2Framework": {
                        "value": "caldera"
                    },
                    "c2AdminUserName": {
                        "value": "[parameters('calderaC2AdminUserName')]"
                    },
                    "c2AdminPassword": {
                        "value": "[parameters('calderaC2AdminPassword')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[contains(parameters('addToCart'), 'win10')]",
            "name": "deployWin10VM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/Win10/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "enableMonitoringAgent": {
                        "value": true
                    },
                    "enableAntimalware": {
                        "value": "[if(contains(parameters('addToCart'), 'calderaC2'), bool('true'), bool('false'))]"
                    },
                    "enableSysmon": {
                        "value": true
                    },
                    "workspaceId": {
                        "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').customerId]"
                    },
                    "workspaceKey": {
                        "value": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').primarySharedKey]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('addToCart'), 'win10-calderaC2')]",
            "name": "vnet-c2/peering-to-remote-vnet-win",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "deployC2VM",
                "deployWin10VM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(equals(parameters('addToCart'), 'win10-calderaC2'), reference('deployWin10VM').outputs.virtualNetworkId.value, 'resource not deployed')]"
                }
            }
        },
        {
            "condition": "[equals(parameters('addToCart'), 'win10-calderaC2')]",
            "name": "vnet-win/peering-to-remote-vnet-c2",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "deployC2VM",
                "deployWin10VM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(equals(parameters('addToCart'), 'win10-calderaC2'), reference('deployC2VM').outputs.virtualNetworkId.value, 'resource not deployed')]"
                }
            }
        },
        {
            "condition": "[equals(parameters('addToCart'), 'win10-calderaC2')]",
            "name": "WinExecC2Payload",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', 'vnet-c2', 'peering-to-remote-vnet-win')]",
                "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', 'vnet-win', 'peering-to-remote-vnet-c2')]",
                "azCLIPostAnalyticRules"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupWinVM"
                    },
                    "commandToExecute": {
                        "value": "powershell -ExecutionPolicy Unrestricted -File ./Invoke-Manx.ps1 -C2IPAddress 10.0.0.8"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(variables('artifactsBlacksmithLocation'), 'resources/scripts/powershell/c2/Invoke-Manx.ps1')]"
                        ]
                    },
                    "vmName": {
                        "value": "WIN001"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
           "condition": "[equals(parameters('addToCart'), 'ubuntu-calderaC2')]",
            "name": "deployUbuntuVM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(variables('artifactsBlacksmithLocation'), 'templates/azure/LinuxVM/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmName": {
                        "value": "UBUNTU001"
                    },
                    "virtualNetworkName": {
                        "value": "vnet-ubuntu"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('linuxAuthenticationType')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[if(equals(parameters('linuxAuthenticationType'), 'password'), parameters('adminPassword'), parameters('linuxAdminKey'))]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('addToCart'), 'ubuntu-calderaC2')]",
            "name": "vnet-c2/peering-to-remote-vnet-ubuntu",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "deployC2VM",
                "deployUbuntuVM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(equals(parameters('addToCart'), 'ubuntu-calderaC2'), reference('deployUbuntuVM').outputs.virtualNetworkId.value, 'resource not deployed')]"
                }
            }
        },
        {
            "condition": "[equals(parameters('addToCart'), 'ubuntu-calderaC2')]",
            "name": "vnet-ubuntu/peering-to-remote-vnet-c2",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "deployC2VM",
                "deployUbuntuVM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(equals(parameters('addToCart'), 'ubuntu-calderaC2'), reference('deployC2VM').outputs.virtualNetworkId.value, 'resource not deployed')]"
                }
            }
        }
    ],
    "outputs": {
        "workspaceName": {
            "type": "string",
            "value": "[variables('uniqueWorkspace')]"
        },
        "workspaceIdOutput": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').customerId]"
        },
        "workspaceKeyOutput": {
            "type": "string",
            "value": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('uniqueWorkspace')), '2015-11-01-preview').primarySharedKey]"
        }
    }
}
